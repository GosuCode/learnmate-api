generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String
  password      String?
  googleId      String?  @unique
  avatar        String?
  authProvider  String   @default("local")
  emailVerified Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  contents   Content[]
  flashcards Flashcard[]
  summaries  Summary[]
  quizzes    Quiz[]

  @@map("users")
}

model Semester {
  id        String    @id @default(cuid())
  name      String    @unique
  code      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  subjects  Subject[]
}

model Subject {
  id         String    @id @default(cuid())
  name       String    @unique
  code       String    @unique
  semesterId String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  contents   Content[]
  semester   Semester  @relation(fields: [semesterId], references: [id])
}

model Content {
  id          String         @id @default(cuid())
  title       String
  slug        String         @unique
  type        ContentType
  description String?
  subjectId   String
  parentId    String?
  tags        String[]
  published   Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  createdById String
  parent      Content?       @relation("ContentToContent", fields: [parentId], references: [id])
  children    Content[]      @relation("ContentToContent")
  subject     Subject        @relation(fields: [subjectId], references: [id])
  blocks      ContentBlock[]
  createdBy   User           @relation(fields: [createdById], references: [id])
}

model ContentBlock {
  id        String    @id @default(cuid())
  type      BlockType
  text      String?
  fileUrl   String?
  order     Int
  contentId String
  content   Content   @relation(fields: [contentId], references: [id])
}

model Flashcard {
  id           String   @id @default(cuid())
  front        String
  back         String
  easeFactor   Float    @default(2.5)
  interval     Int      @default(0)
  repetition   Int      @default(0)
  lastReviewed DateTime @default(now())
  nextReview   DateTime @default(now())
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([nextReview])
  @@index([userId, nextReview])
  @@map("flashcards")
}

enum ContentType {
  course
  chapter
  topic
  article
}

model Summary {
  id               String   @id @default(cuid())
  title            String
  originalText     String
  summary          String
  wordCount        Int
  processingMethod String
  userId           String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
  @@map("summaries")
}

model Quiz {
  id               String   @id @default(cuid())
  title            String
  originalText     String
  questions        Json
  totalQuestions   Int
  processingMethod String
  userId           String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
  @@map("quizzes")
}

enum BlockType {
  text
  pdf
  image
  video
  code
}
